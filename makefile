# Compiler
CXX      = g++

# Detect architecture
uname_p:=$(shell uname -p)
$(info Building for architecture : "$(uname_p)")

ifeq ($(uname_p),x86_64)
	TARGET := Linux64
else
	TARGET := Linux32
endif

# for GCOV (Testing coverage)
#CXXFLAGS+= -fprofile-arcs -ftest-coverage 

# Debugging ON/OFF (comment to disable)
CXXFLAGS+= -DDEBUG 	

CXXFLAGS+= -g # To generate symbols for gdb
CXXFLAGS+= `sdl2-config --cflags`

#includes for submodules
CXXFLAGS+= -I extern
CXXFLAGS+= -I extern/imgui

#includes for non sub-modules libs
CXXFLAGS+= -I libs
CXXFLAGS+= -I libs/gl3w
CXXFLAGS+= -I libs/glfw

# Nodable header includes
CXXFLAGS+= -I sources
CXXFLAGS+= -I sources/Components
CXXFLAGS+= -I sources/Entities
CXXFLAGS+= -I sources/Common

CXXFLAGS+= -lGL -ldl
CXXFLAGS+= `sdl2-config --libs`
CXXFLAGS+= `pkg-config --cflags glfw3`
CXXFLAGS+= -std=c++11

LDFLAGS=
EXECUTABLE=nodable.bin


BINDIR :=bin/$(TARGET)
SRCDIR :=sources
OBJDIR :=build/$(TARGET)

# Nodable source files :
SOURCES := $(wildcard $(SRCDIR)/*.cpp)
SOURCES += $(wildcard $(SRCDIR)/Components/*.cpp)
SOURCES += $(wildcard $(SRCDIR)/Entities/*.cpp)
SOURCES += $(wildcard $(SRCDIR)/Common/*.cpp)

OBJECTS := $(patsubst $(SRCDIR)/%.cpp, $(OBJDIR)/%.o, $(SOURCES))
OBJECTS += extern/ImGuiColorTextEdit/TextEditor.o
OBJECTS += $(patsubst %.cpp, %.o, $(wildcard ./extern/imgui/*.cpp))

DEPENDENCIES := $(patsubst $(SRCDIR)/%.cpp, $(OBJDIR)/%.d, $(SOURCES))
OBJECTS += libs/gl3w/GL/gl3w.c

all: makeFolders dependencies $(EXECUTABLE)

include $(wildcard $(OBJDIR)/*.d)

$(EXECUTABLE): $(OBJECTS)
	$(CXX)  $(OBJECTS) -o $(BINDIR)/$(EXECUTABLE) $(CXXFLAGS)

# Specific for imGui :
./extern/imgui/%.o: ./extern/imgui/%.cpp

# Build each object file
$(OBJDIR)/%.o: $(SRCDIR)/%.cpp $(OBJDIR)/%.d
	$(CXX) -c $(CXXFLAGS) $< -o $@

# This target creates a makefile per *.cpp (with all dependencies automatically generated by the compiler with -MM flag)
$(OBJDIR)/%.d : $(SRCDIR)/%.cpp
	@set -e; rm -f $@; \
	$(CXX) -MM $(CXXFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,$(OBJDIR)/\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

# A target to run the program
.PHONY: run
run: all
	echo $(uname_p)
	$(EXECUTABLE)
	
.PHONY: dependencies
dependencies: $(DEPENDENCIES)

.PHONY: makeFolders
makeFolders:
	mkdir -p $(OBJDIR)
	mkdir -p $(OBJDIR)/Components
	mkdir -p $(OBJDIR)/Entities
	mkdir -p $(OBJDIR)/Common
	mkdir -p $(BINDIR)
	mkdir -p $(BINDIR)/saves

.PHONY: clean
clean:
	rm -rf $(OBJECTS) $(DEPENDENCIES)

.PHONY: mrproper
mrproper: clean
	rm -rf $(EXEC)

